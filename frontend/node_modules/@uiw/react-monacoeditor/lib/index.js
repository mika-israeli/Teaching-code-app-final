"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard")["default"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
exports.loadFont = loadFont;
var _regeneratorRuntime2 = _interopRequireDefault(require("@babel/runtime/helpers/regeneratorRuntime"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireWildcard(require("react"));
var monaco = _interopRequireWildcard(require("monaco-editor"));
var _codicon = _interopRequireDefault(require("monaco-editor/min/vs/base/browser/ui/codicons/codicon/codicon.ttf"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["width", "height", "value", "theme", "language", "autoComplete", "options", "editorDidMount", "onChange", "defaultValue"];
/* eslint-disable react-hooks/exhaustive-deps */
// @ts-ignore
function noop() {}
function loadFont(_x, _x2) {
  return _loadFont.apply(this, arguments);
}
function _loadFont() {
  _loadFont = (0, _asyncToGenerator2["default"])( /*#__PURE__*/(0, _regeneratorRuntime2["default"])().mark(function _callee(fontFamily, url) {
    var font;
    return (0, _regeneratorRuntime2["default"])().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          font = new FontFace(fontFamily, "local(".concat(fontFamily, "), url(").concat(url, ")")); // wait for font to be loaded
          _context.next = 3;
          return font.load();
        case 3:
          // add font to document
          document.fonts.add(font);
        case 4:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _loadFont.apply(this, arguments);
}
function MonacoEditor(props, ref) {
  var _props$width = props.width,
    width = _props$width === void 0 ? '100%' : _props$width,
    _props$height = props.height,
    height = _props$height === void 0 ? '100%' : _props$height,
    _props$value = props.value,
    value = _props$value === void 0 ? '' : _props$value,
    _props$theme = props.theme,
    theme = _props$theme === void 0 ? '' : _props$theme,
    _props$language = props.language,
    language = _props$language === void 0 ? 'javascript' : _props$language,
    autoComplete = props.autoComplete,
    _props$options = props.options,
    options = _props$options === void 0 ? {} : _props$options,
    _props$editorDidMount = props.editorDidMount,
    editorDidMount = _props$editorDidMount === void 0 ? noop : _props$editorDidMount,
    _props$onChange = props.onChange,
    onChange = _props$onChange === void 0 ? noop : _props$onChange,
    _props$defaultValue = props.defaultValue,
    defaultValue = _props$defaultValue === void 0 ? '' : _props$defaultValue,
    other = (0, _objectWithoutProperties2["default"])(props, _excluded);
  options.language = language || options.language;
  options.theme = theme || options.theme;
  var _useState = (0, _react.useState)(defaultValue),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    val = _useState2[0],
    setVal = _useState2[1];
  var container = (0, _react.useRef)();
  var $editor = (0, _react.useRef)();
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      container: container.current || null,
      editor: $editor.current,
      monaco: monaco
    };
  });
  (0, _react.useEffect)(function () {
    return setVal(value);
  }, [value]);
  (0, _react.useEffect)(function () {
    if ($editor.current) {
      $editor.current.setValue(val);
    }
  }, [val]);
  (0, _react.useEffect)(function () {
    return function () {
      if ($editor.current) {
        $editor.current.dispose();
      }
    };
  }, []);
  (0, _react.useEffect)(function () {
    if (options.theme) {
      monaco.editor.setTheme(options.theme);
    }
  }, [options.theme]);
  (0, _react.useEffect)(function () {
    var CPDisposable;
    if ($editor.current && autoComplete) {
      if ($editor.current.getModel() && $editor.current.getPosition()) {
        CPDisposable = monaco.languages.registerCompletionItemProvider(language, {
          provideCompletionItems: function provideCompletionItems(model, position) {
            return {
              suggestions: autoComplete(model, position)
            };
          }
        });
      }
    }
    return function () {
      CPDisposable && CPDisposable.dispose();
    };
  }, [language, autoComplete]);
  (0, _react.useEffect)(function () {
    if ($editor.current) {
      var _model = $editor.current.getModel();
      if (_model) {
        monaco.editor.setModelLanguage(_model, props.language || '');
      }
    }
  }, [language]);
  (0, _react.useEffect)(function () {
    if ($editor.current) {
      var optionsRaw = $editor.current.getRawOptions();
      Object.keys(optionsRaw).forEach(function (keyname) {
        var propsOpt = options[keyname];
        if (optionsRaw[keyname] !== propsOpt && propsOpt !== undefined) {
          $editor.current.updateOptions((0, _defineProperty2["default"])({}, keyname, propsOpt));
        }
      });
    }
  }, [options]);
  var refElement = (0, _react.useCallback)(function (node) {
    if (node !== null) {
      container.current = node;
      $editor.current = monaco.editor.create(node, (0, _objectSpread2["default"])({
        value: val,
        language: language
      }, options));
      if (options.theme) {
        monaco.editor.setTheme(options.theme);
      }
      // After initializing monaco editor
      editorDidMount($editor.current, monaco);
      $editor.current.onDidChangeModelContent(function (event) {
        var valueCurrent = $editor.current.getValue();
        // Always refer to the latest value
        onChange(valueCurrent, event);
      });
      loadFont('codicon', _codicon["default"])["catch"](function (e) {
        if (e) {
          throw new Error('Failed to load font codicon!!');
        }
      });
    }
  }, []);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, other), {}, {
    ref: refElement,
    style: (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, other.style), {}, {
      width: width,
      height: height
    })
  }));
}
var _default = /*#__PURE__*/_react["default"].forwardRef(MonacoEditor);
exports["default"] = _default;